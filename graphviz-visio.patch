--- graphviz-2.36.0/plugin/visio/gvrender_visio_vdx.cpp.orig	2014-01-11 23:59:44.000000000 +0100
+++ graphviz-2.36.0/plugin/visio/gvrender_visio_vdx.cpp	2014-04-07 02:59:19.161673397 +0200
@@ -101,11 +101,11 @@ static void vdxgen_begin_anchor(GVJ_t *j
 		context->AddAnchor(job, url, tooltip, target, id);
 }
 
-static void vdxgen_textpara(GVJ_t * job, pointf p, textpara_t * para)
+static void vdxgen_textspan(GVJ_t * job, pointf p, textspan_t * span)
 {
 	Visio::Render* context = (Visio::Render*)job->context;
 	if (context)
-		context->AddText(job, p, para);	
+		context->AddText(job, p, span);	
 }
 
 static void vdxgen_ellipse(GVJ_t * job, pointf * A, int filled)
@@ -159,7 +159,7 @@ gvrender_engine_t vdxgen_engine = {
     0,				/* vdxgen_end_anchor */
     0,				/* vdxgen_begin_label */
 	0,				/* vdxgen_end_label */
-    vdxgen_textpara,
+    vdxgen_textspan,
     0,				/* vdxgen_resolve_color */
     vdxgen_ellipse,
     vdxgen_polygon,
--- graphviz-2.36.0/plugin/visio/VisioRender.cpp.orig	2014-01-11 23:59:44.000000000 +0100
+++ graphviz-2.36.0/plugin/visio/VisioRender.cpp	2014-04-06 22:18:58.508690656 +0200
@@ -233,9 +233,9 @@ namespace Visio
 		AddGraphic(job, Graphic::CreatePolyline(job, A, n));
 	}
 	
-	void Render::AddText(GVJ_t* job, pointf p, textpara_t *para)
+	void Render::AddText(GVJ_t* job, pointf p, textspan_t *span)
 	{
-		AddText(job, Text::CreateText(job, p, para));
+		AddText(job, Text::CreateText(job, p, span));
 	}
 
 	void Render::AddAnchor(GVJ_t *job, char *url, char *tooltip, char *target, char *id)
--- graphviz-2.36.0/plugin/visio/VisioText.cpp.orig	2014-01-11 23:59:44.000000000 +0100
+++ graphviz-2.36.0/plugin/visio/VisioText.cpp	2014-04-06 22:19:55.288689473 +0200
@@ -19,6 +19,7 @@
 
 #include "gvcjob.h"
 #include "gvio.h"
+#include <stdlib.h>
 #include <string.h>
 
 extern "C" char *xml_string(char* str);
@@ -77,16 +78,16 @@ namespace Visio
 		gvprintf(job, "<pp IX='%d'/><cp IX='%d'/>%s\n", index, index, _text ? xml_string(_text) : "");	/* para mark + char mark + actual text */
 	}
 	
-	Text* Text::CreateText(GVJ_t* job, pointf p, textpara_t* para)
+	Text* Text::CreateText(GVJ_t* job, pointf p, textspan_t* span)
 	{
 		Para::HorzAlign horzAlign;
 		
 		/* compute text bounding box and VDX horizontal align */
 		boxf bounds;
-		bounds.LL.y = p.y + para->yoffset_centerline;
-		bounds.UR.y = p.y + para->yoffset_centerline + para->height;
-		double width = para->width;
-		switch (para->just)
+		bounds.LL.y = p.y + span->yoffset_centerline;
+		bounds.UR.y = p.y + span->yoffset_centerline + span->size.y;
+		double width = span->size.x;
+		switch (span->just)
 		{
 			case 'r':
 				horzAlign = Para::horzRight;
@@ -110,13 +111,13 @@ namespace Visio
 			new Para(
 				horzAlign),
 			new Char(
-				para->fontsize,
+				span->font->size,
 				job->obj->pencolor.u.rgba[0],
 				job->obj->pencolor.u.rgba[1],
 				job->obj->pencolor.u.rgba[2]),
 			new Run(
 				bounds,
-				para->str));
+				span->str));
 	}
 	
 	Text::Text(Para* para, Char* chars, Run* run):
