--- graphviz-2.2/dynagraph/common/Geometry.h.orig	2004-12-11 20:26:08.000000000 +0100
+++ graphviz-2.2/dynagraph/common/Geometry.h	2005-02-21 11:25:30.000000000 +0100
@@ -201,9 +201,11 @@
     typedef std::vector < Coord >::iterator iterator;	// for gcc 3.0; why?  
     Coord & at(int i) {
 	return operator[](i);
-    } // for earlier gccs Coord at(int i) const {
+    } // for earlier gccs
+    Coord at(int i) const {
 	return operator[] (i);
-    } int degree;
+    }
+    int degree;
   Line():degree(0) {
     }
   Line(size_t N):std::vector < Coord > (N), degree(0) {
--- graphviz-2.2/dynagraph/common/LineTricks.h.orig	2004-12-11 20:26:08.000000000 +0100
+++ graphviz-2.2/dynagraph/common/LineTricks.h	2005-02-21 11:25:03.000000000 +0100
@@ -63,7 +63,8 @@
 struct segsizes:std::vector < double > {
     double &at(int i) {
 	return operator[](i);
-    } // for earlier gccs segsizes(Coord * ps, int n, int degree) {
+    } // for earlier gccs
+    segsizes(Coord * ps, int n, int degree) {
 	int nseg = (n - 1) / degree, i;
 	resize(nseg);
 	if (!nseg)
--- graphviz-2.2/dynagraph/dynadag/ns.h.orig	2004-12-11 20:26:08.000000000 +0100
+++ graphviz-2.2/dynagraph/dynadag/ns.h	2005-02-21 12:01:51.000000000 +0100
@@ -107,14 +107,14 @@
 
 	static NSG & NSd(G * g) {
 	    return reinterpret_cast < NSG & >(gd < NSData < void *,
-					      void *>>(g));
+					      void *> >(g));
 	} static NSN & NSd(Node * n) {
 	    return reinterpret_cast < NSN & >(gd < NSNode < void *,
-					      void *>>(n));
+					      void *> >(n));
 	}
 	static NSE & NSd(Edge * e) {
 	    return reinterpret_cast < NSE & >(gd < NSEdge < void *,
-					      void *>>(e));
+					      void *> >(e));
 	}
 
 	struct CycleException:DGException {
--- graphviz-2.2/dynagraph/dynadag/DynaDAG.h.orig	2004-12-11 20:26:08.000000000 +0100
+++ graphviz-2.2/dynagraph/dynadag/DynaDAG.h	2005-02-21 12:12:48.000000000 +0100
@@ -40,7 +40,7 @@
     struct DDCNodeData:NS::NSNode < void *, void *>, ConstraintType {
     };
     typedef LGraph < NS::NSData < void *, void *>, DDCNodeData,
-	NS::NSEdge < void *, void *>>DDCGraph;
+	NS::NSEdge < void *, void *> >DDCGraph;
     typedef NS::NS < DDCGraph, NS::AccessNoAttr < DDCGraph > >DDNS;
 
     struct NodeConstraints {
@@ -265,7 +265,8 @@
 	    else
 		return xcon;
 	}
-					// config Median med[2];
+					// config
+	Median med[2];
 					// UpDown
 	int rank, order;
 	bool inConfig;
@@ -357,11 +358,11 @@
 */
     inline DDNode & DDd(DDModel::Node * n) {
 	return reinterpret_cast < DDNode & >(gd < DDNodeT < void,
-					     void >>(n));
+					     void > >(n));
     }
     inline DDEdge & DDd(DDModel::Edge * e) {
 	return reinterpret_cast < DDEdge & >(gd < DDEdgeT < void,
-					     void >>(e));
+					     void > >(e));
     }
     inline const char *type(DDModel::Node * mn) {
 	return DDd(mn).amEdgePart()? "path" : "multinode";
@@ -737,7 +738,8 @@
 	    client(client),
 	    current(current), dynaDAG(dynaDAG), xconOwner(xconOwner) {
 	}
-	// called by DynaDAGServer void Update(ChangeQueue & changeQ);
+	// called by DynaDAGServer
+	void Update(ChangeQueue & changeQ);
 	void SetYs();
 	// services
 	double LeftExtent(DDModel::Node * n);
--- graphviz-2.2/dynagraph/voronoi/voronoi.h.orig	2004-12-11 20:26:09.000000000 +0100
+++ graphviz-2.2/dynagraph/voronoi/voronoi.h	2005-02-21 12:52:05.000000000 +0100
@@ -48,7 +48,8 @@
 	    infos(N), sites(N), edges(sites, infos, bounds, N),
 	    hedges(sites, N) {
 	}
-	// Server void Process(ChangeQueue & changeQ);
+	// Server
+	 void Process(ChangeQueue & changeQ);
 
       private:
 	 Infos infos;
--- graphviz-2.2/dynagraph/shortspline/shortspline.h.orig	2004-12-11 20:26:09.000000000 +0100
+++ graphviz-2.2/dynagraph/shortspline/shortspline.h	2005-02-21 12:53:10.000000000 +0100
@@ -19,7 +19,8 @@
 struct ShortSpliner:Server {
     ShortSpliner(Layout * client, Layout * current):Server(client, current) {
     }
-    // Server void Process(ChangeQueue & changeQ);
+    // Server
+    void Process(ChangeQueue & changeQ);
 };
 struct ClockwiseShapes:DGException {
     ClockwiseShapes():DGException("node shapes must be counter-clockwise") {
